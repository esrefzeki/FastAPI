
# uvicorn using:

uvicorn directoryName.filename:app --reload (for auto-update when save)

# docs
/docs
/redoc

# SQLALCHEMY

SqlAlchemy is one of the ORM(Object Relational Mapper) for python.

SQLALCHEMY_DATABASE_URL = "<sqlname>://<username>:<password>@<ip adress or hosting or localhost>/<SQL Name>"



# def find_post(id):
#     for p in my_post:
#         if p['id'] == id:
#             return p
#
#
# def find_index_post(id):
#     for i, p in enumerate(my_post):
#         if p['id'] == id:
#             return i

pip freeze # env de olan tüm kurulu kütüphaneleri gösterir

owner = relationship("User") # Bu özellikle birlikte bir classı çağırıp sub olarak gösterebiliyoruz, model ve schema yı düzenliyoruz.
# Ayrıca dikkat edilmesi gereken noktalardan bir tanesi de aynı dosya içerisine bulunan classlarda öncelikli atanan classın
# diğer classın üzerinde olması gerektiğini noktasıdır.

# Alembic ******

# Alembic çalışmasında database içerisindeki Base 'i tanımlamak ve import etmek gerekiyor.
# Alembic ile downgrade yapmak için ayrıca -1, -2 gibi kaç versiyon eskiye gitmek istediğimizi belirtebiliyoruz.
# Alembic'te autogenerate i aktif ettikten sonra otomatik olarak base models içerisindeki verileri (migration env doyasında
# tanımladığımız için) kendi düzenleyip upgrade'e hazır hale getiriyor. Son düzenlemelerin alembic aracılığı ile
# db'ye kaydedilmesi için alembic upgrade özelliğini konsolda çalıştırmamız gerekiyor.


# ÖNEMLİ NOT:

# API'leri sadece postman'dan kontrol etmek doğru değil. Farklı tip uygulamalardan giriş yapılabilme ihtimaline karşın
# etkin çözümlerden biri örneğin Chrome üzerinden bir siteye girdikten sonra Console kısmına:
# fetch('http://localhost:8000/').then(res => res.json()).then(console.log)

# TODO: CORS olayını araştır.

# requirements.txt dosyasını kolayca oluşturmak için consola: "pip freeze > requirements.txt" yazmak yeterli :)
# ve bunları kurmak için ise yine consola: "pip install -r requirements.txt" yazmamız yeterli :))

# Production serverında alembic revision yapmamak gerekiyor. Dev ortamında bunu yapıp dosyaları push edip
# upgrade yapmak doğru olanı olacaktır.

op.create_table("users",
                    sa.Column('id', sa.Integer(), nullable=False, primary_key=True),
                    sa.Column('email', sa.String(), nullable=False, unique=True),
                    sa.Column('password', sa.String(), nullable=False),
                    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False,
                              server_default=sa.text('now()')),
                    sa.Column('phone_number', sa.String(), nullable=True, unique=True)
                    )
    op.create_table("posts",
                    sa.Column('id', sa.Integer(), nullable=False, primary_key=True),
                    sa.Column('title', sa.String(), nullable=False),
                    sa.Column('content', sa.String(), nullable=False),
                    sa.Column('published', sa.Boolean(), server_default="TRUE", nullable=False),
                    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False,
                              server_default=sa.text('now()')),
                    sa.Column('owner_id', sa.Integer(), sa.ForeignKey('users.id', ondelete="CASCADE"), nullable=False),
                    sa.Column('owner', sa.String())
                    )
    op.create_table("votes",
                    sa.Column('user_id', sa.Integer(), sa.ForeignKey("users.id", ondelete="CASCADE"),
                              primary_key=True),
                    sa.Column('post_id', sa.Integer(), sa.ForeignKey("posts.id", ondelete="CASCADE"),
                              primary_key=True))